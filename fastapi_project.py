from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import httpx
import os
from dotenv import load_dotenv
import uvicorn
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = FastAPI()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_BOT_TOKEN:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")


class Product(BaseModel):
    id: str
    title: str


class Buyer(BaseModel):
    email: str


class PaymentEvent(BaseModel):
    eventType: str
    product: Product
    buyer: Buyer
    contractId: str
    amount: float
    currency: str
    timestamp: str
    status: str
    errorMessage: str
    chat_id: str = None


async def send_telegram_message(chat_id: str, message: str):
    if not TELEGRAM_BOT_TOKEN:
        raise Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
        
    async with httpx.AsyncClient() as client:
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "Markdown"
        }
        response = await client.post(TELEGRAM_API_URL, json=payload)
        if response.status_code != 200:
            raise Exception(f"Telegram API error: {response.text}")


@app.get("/")
async def index():
    return {"message": "Hello World"}


@app.post("/webhook/payment")
async def payment_webhook(payload: PaymentEvent):
    # if payload.eventType != "payment.success":
    #     raise HTTPException(status_code=400, detail="Unsupported event type")

    message = (
        f"*–ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!*\n"
        f"üí∞ –°—É–º–º–∞: `{payload.amount} {payload.currency}`\n"
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {payload.product.title}\n"
        f"üìß –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {payload.buyer.email}\n"
        f"üìÑ –î–æ–≥–æ–≤–æ—Ä: `{payload.contractId}`\n"
        f"üïí –í—Ä–µ–º—è: `{payload.timestamp}`\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {payload.status}"
    )

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ JSON –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        chat_id = payload.chat_id or TELEGRAM_CHAT_ID
        await send_telegram_message(chat_id, message)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to send Telegram message: {e}")

    return {"status": "ok"}


@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        message_text = data["message"]["text"]
        user_name = data["message"]["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –≠—Ö–æ-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            response_message = f"–≠—Ö–æ: {message_text}"
            await send_telegram_message(str(chat_id), response_message)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to send Telegram message: {e}")
    
    return {"status": "ok"}


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print(f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/RuslanSenatorov")
    uvicorn.run("fastapi_project:app", host="0.0.0.0", port=8000, reload=True)
